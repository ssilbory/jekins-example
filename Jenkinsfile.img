pipeline {
  agent {
    kubernetes {
      // Use Kubernetes to build our images.
      // Use Img instead of docker so we can build images without docker.
      // Note You must define a Jenkins Credentials. (see README)
      // Note2 You need to run a privileged container which is less insecure than exposing your docker socket.
      // Note3 The bash container is just a demo to show you can use multiple containers in your Pod.
      defaultContainer 'img'
      yaml """
kind: Pod
metadata:
  annotations:
    container.apparmor.security.beta.kubernetes.io/img: unconfined
    container.seccomp.security.alpha.kubernetes.io/img: unconfined
spec:
  containers:
  - name: img
    image: docker.io/ssilbory/img-builder:latest
    securityContext:
        privileged: true
    command:
    - sleep
    args:
    - 9999999
  - name: bash
    image: bash:latest
    command:
    - sleep
    args:
    - 9999999
"""
    }
  }
  environment {
      APP_NAME          = 'myapp'
      //REPO_USER = credentials('docker-repo-user')
      //REPO_PASSWORD = credentials('docker-repo-password')
  }
  stages {
    // This is just a stub to demo using the non-default container.
    // You could for example build your app then package with it with the img container.
    stage('Bash container') {
      steps {
        container('bash') {
          sh 'echo build/prep stage'
          sh 'ls '
        }
      }
    }
    // Note that I'm using the default container img here.
    stage('Build Docker image with Img') {
      steps {
        // Build container with the Jenkins build id as the docker tag
        sh "img build . -t ${APP_NAME}:${env.BUILD_ID}"
        // You need to login to push the container.  Use Jenkins secrets to pass your auth.
        // sh "img login -u $REPO_USER -p REPO_PASSWORD"
        //sh "img push ${DOCKER_REPO}:${env.BUILD_ID}"
       }
    }
    // This is just a stub to demo using the non-default container.
    // You could for example deploy and test your newly build container.
    stage('Bash container') {
      steps {
        container('bash') {
          sh 'echo test/deploy stage'
          sh 'ls '
        }
      }
    }
  }
}
